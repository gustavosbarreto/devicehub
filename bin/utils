#!/bin/sh

set -e

# Evaluate the appropriate Docker Compose command based on availability and V2 compatibility.
#
# If a compatible command is found, it is set to $COMPOSE_COMMAND. If no compatible command
# is found, the function exits with status 1.
evaluate_docker_compose() {
    local COMPOSE_COMMAND

    if docker compose version --short 2> /dev/null | grep -q "^2\."; then
        COMPOSE_COMMAND="docker compose"
    elif docker-compose version --short 2> /dev/null | grep -q "^2\."; then
        COMPOSE_COMMAND="docker-compose"
    fi

    if [ -z "$COMPOSE_COMMAND" ]; then
        echo >&2 "ERROR: Cannot find Docker Compose compatible with V2 spec"
        exit 1
    fi

    echo "$COMPOSE_COMMAND"
}

set -o allexport

env_override=${ENV_OVERRIDE:-./.env.override}
if [ -f "$env_override" ]; then
    echo "INFO: Loading $env_override"
    . "$env_override"
fi

set +o allexport

COMPOSE_FILE="docker-compose.yml"

[ "$SHELLHUB_AUTO_SSL" = "true" ] && COMPOSE_FILE="${COMPOSE_FILE}:docker-compose.autossl.yml"
[ "$SHELLHUB_ENV" = "development" ] && COMPOSE_FILE="${COMPOSE_FILE}:docker-compose.dev.yml:docker-compose.agent.yml"
[ "$SHELLHUB_ENTERPRISE" = "true" ] && [ "$SHELLHUB_ENV" != "development" ] && COMPOSE_FILE="${COMPOSE_FILE}:docker-compose.enterprise.yml"
[ "$SHELLHUB_CONNECTOR" = "true" ] && [ "$SHELLHUB_ENV" = "development" ] && COMPOSE_FILE="${COMPOSE_FILE}:docker-compose.connector.dev.yml"
[ "$SHELLHUB_CONNECTOR" = "true"  ] && [ "$SHELLHUB_ENV" != "development" ] && COMPOSE_FILE="${COMPOSE_FILE}:docker-compose.connector.yml"
[ -f docker-compose.override.yml ] && COMPOSE_FILE="${COMPOSE_FILE}:docker-compose.override.yml"

[ -f "$EXTRA_COMPOSE_FILE" ] && COMPOSE_FILE="${COMPOSE_FILE}:${EXTRA_COMPOSE_FILE}"

export COMPOSE_FILE
