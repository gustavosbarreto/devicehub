name: QA

on:
  push:
    branches: [ master ]

  pull_request:
    branches: [ master ]

jobs:

  validate:
    name: validate

    strategy:
      fail-fast: false
      matrix:
        project: [ api,  agent,  pkg,  ssh, ui ]

    runs-on: ubuntu-latest

    steps:

    - name: Set up Go 1.x [Go]
      if: matrix.project != 'ui'
      uses: actions/setup-go@v2
      with:
        go-version: 1.14
      id: go

    - name: Check out code
      uses: actions/checkout@v2

    - name: Get Go dependencies [Go]
      if: matrix.project != 'ui'
      working-directory: ${{ matrix.project }}
      run: go mod download

    - name: Cache Go files [Go]
      uses: actions/cache@v1
      if: matrix.project != 'ui'
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run Revive Action [Go]
      if: matrix.project != 'ui'
      uses: docker://morphy/revive-action:v1
      with:
        config: .revive.toml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Unit test [Go]
      if: matrix.project != 'ui'
      working-directory: ${{ matrix.project }}
      run: go test -v ./...
    
    - name: SonarCloud Scan [Go]
      if: matrix.project == 'api'
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Go build [Go]
      if: matrix.project != 'ui'
      working-directory: ${{ matrix.project }}
      run: go build -v ./...

    - name: Go build (with docker tag) [Go]
      if: matrix.project == 'agent'
      working-directory: ${{ matrix.project }}
      run: go build -tags docker -v ./...
    
    - name: Set up Node.JS 12.16 [UI]
      if: matrix.project == 'ui'
      uses: actions/setup-node@v1
      with:
          node-version: "12.16"

    - name: Install Node Dependencies [UI]
      if: matrix.project == 'ui'
      working-directory: ${{ matrix.project }}
      run: npm install

    - name: Cache node modules [UI]
      if: matrix.project == 'ui'
      uses: actions/cache@v1
      with:
        path: ui/node_modules
        key: ${{ runner.OS }}-ui-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-ui-${{ env.cache-name }}-
          ${{ runner.OS }}-ui-
          ${{ runner.OS }}-

    - name: Unit test [UI]
      if: matrix.project == 'ui'
      working-directory: ${{ matrix.project }}
      run: npm run test:unit -- -u

    - name: Save Code Linting Report JSON [UI]
      if: matrix.project == 'ui'
      working-directory: ${{ matrix.project }}
      run: npm run --silent lint:report | tee eslint_report.json
      continue-on-error: true

    - name: Annotate Code Linting Results [UI]
      if: matrix.project == 'ui'
      uses: ataylorme/eslint-annotate-action@1.0.4
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        report-json: "ui/eslint_report.json"
