package agent

import (
	"crypto/rsa"
	"io"
	"net"
	"net/http"
	"net/url"
	"os"
	"runtime"
	"strings"
	"time"

	"github.com/Masterminds/semver"
	"github.com/labstack/echo/v4"
	"github.com/pkg/errors"
	"github.com/shellhub-io/shellhub/pkg/agent/pkg/keygen"
	"github.com/shellhub-io/shellhub/pkg/agent/pkg/sysinfo"
	"github.com/shellhub-io/shellhub/pkg/agent/pkg/tunnel"
	"github.com/shellhub-io/shellhub/pkg/agent/server"
	"github.com/shellhub-io/shellhub/pkg/api/client"
	"github.com/shellhub-io/shellhub/pkg/models"
	"github.com/shellhub-io/shellhub/pkg/revdial"
	log "github.com/sirupsen/logrus"
)

type Ping struct {
	Timestamp time.Time
}

// TODO: can it panic?
// throw sends a value on a channel, but does not block the goroutine.
func throw[V any, T chan V](ch T, v V) {
	ch <- v
}

// AgentVersion store the version to be embed inside the binary. This is
// injected using `-ldflags` build option (e.g: `go build -ldflags "-X
// main.AgentVersion=1.2.3"`).
//
// If set to `latest`, the auto-updating mechanism is disabled. This is intended
// to be used during development only.
var (
	AgentVersion  string
	AgentPlatform string
)

// Config provides the configuration for the agent service.
type Config struct {
	// Set the ShellHub Cloud server address the agent will use to connect.
	// This is required.
	ServerAddress string `envconfig:"server_address" required:"true"`

	// Specify the path to the device private key.
	// If not provided, the agent will generate a new one.
	// This is required.
	PrivateKey string `envconfig:"private_key" required:"true"`

	// Sets the account tenant id used during communication to associate the
	// device to a specific tenant.
	// This is required.
	TenantID string `envconfig:"tenant_id" required:"true"`

	// Determine the interval to send the keep alive message to the server. This
	// has a direct impact of the bandwidth used by the device when in idle
	// state. Default is 30 seconds.
	KeepAliveInterval int `envconfig:"keepalive_interval" default:"30"`

	// Set the device preferred hostname. This provides a hint to the server to
	// use this as hostname if it is available.
	PreferredHostname string `envconfig:"preferred_hostname"`

	// Set the device preferred identity. This provides a hint to the server to
	// use this identity if it is available.
	PreferredIdentity string `envconfig:"preferred_identity" default:""`

	// Set password for single-user mode (without root privileges). If not provided,
	// multi-user mode (with root privileges) is enabled by default.
	// NOTE: The password hash could be generated by ```openssl passwd```.
	SingleUserPassword string `envconfig:"simple_user_password"`
}

type Agent struct {
	// config provides the configuration for the agent service.
	config        *Config
	pubKey        *rsa.PublicKey
	Identity      *models.DeviceIdentity
	Info          *models.DeviceInfo
	authData      *models.DeviceAuthResponse
	cli           client.Client
	serverInfo    *models.Info
	serverAddress *url.URL
	sessions      []string
	server        *server.Server
}

// NewAgent creates a new agent instance.
func NewAgent(address string, tenantID string, privateKey string) (*Agent, error) {
	return NewAgentWithConfig(&Config{
		ServerAddress: address,
		TenantID:      tenantID,
		PrivateKey:    privateKey,
	})
}

// NewAgentWithConfig creates a new agent instance with a custom configuration.
func NewAgentWithConfig(config *Config) (*Agent, error) {
	if config.ServerAddress == "" {
		return nil, errors.New("address is empty")
	}

	serverAddress, err := url.Parse(config.ServerAddress)
	if err != nil {
		return nil, errors.Wrap(err, "failed to parse address")
	}

	if config.TenantID == "" {
		return nil, errors.New("tenantID is empty")
	}

	if config.PrivateKey == "" {
		return nil, errors.New("privateKey is empty")
	}

	a := &Agent{
		config:        config,
		serverAddress: serverAddress,
		cli:           client.NewClient(client.WithURL(serverAddress)),
	}

	return a, nil
}

// Initialize initializes agent, generating device identity, loading device information, generating private key,
// reading public key, probing server information and authorizing device on ShellHub server.
func (a *Agent) Initialize() error {
	if err := a.generateDeviceIdentity(); err != nil {
		return errors.Wrap(err, "failed to generate device identity")
	}

	if err := a.loadDeviceInfo(); err != nil {
		return errors.Wrap(err, "failed to load device info")
	}

	if err := a.generatePrivateKey(); err != nil {
		return errors.Wrap(err, "failed to generate private key")
	}

	if err := a.readPublicKey(); err != nil {
		return errors.Wrap(err, "failed to read public key")
	}

	if err := a.probeServerInfo(); err != nil {
		return errors.Wrap(err, "failed to probe server info")
	}

	if err := a.authorize(); err != nil {
		return errors.Wrap(err, "failed to authorize device")
	}

	return nil
}

// generatePrivateKey generates a new private key if it doesn't exist on the filesystem.
func (a *Agent) generatePrivateKey() error {
	if _, err := os.Stat(a.config.PrivateKey); os.IsNotExist(err) {
		if err := keygen.GeneratePrivateKey(a.config.PrivateKey); err != nil {
			return err
		}
	}

	return nil
}

func (a *Agent) readPublicKey() error {
	key, err := keygen.ReadPublicKey(a.config.PrivateKey)
	a.pubKey = key

	return err
}

// generateDeviceIdentity generates device identity.
//
// when preferred identity on Agent is set, it will be used instead of the network interface MAC address.
func (a *Agent) generateDeviceIdentity() error {
	if id := a.config.PreferredIdentity; id != "" {
		a.Identity = &models.DeviceIdentity{
			MAC: id,
		}

		return nil
	}

	// get identity from network interface.
	iface, err := sysinfo.PrimaryInterface()
	if err != nil {
		return err
	}

	a.Identity = &models.DeviceIdentity{
		MAC: iface.HardwareAddr.String(),
	}

	return nil
}

// loadDeviceInfo load some device information.
func (a *Agent) loadDeviceInfo() error {
	osrelease, err := sysinfo.GetOSRelease()
	if err != nil {
		return err
	}

	a.Info = &models.DeviceInfo{
		ID:         osrelease.ID,
		PrettyName: osrelease.Name,
		Version:    AgentVersion,
		Arch:       runtime.GOARCH,
		Platform:   AgentPlatform,
	}

	return nil
}

// probeServerInfo probe server information.
func (a *Agent) probeServerInfo() error {
	info, err := a.cli.GetInfo(AgentVersion)
	a.serverInfo = info

	return err
}

// authorize send auth request to the server.
func (a *Agent) authorize() error {
	data, err := a.cli.AuthDevice(&models.DeviceAuthRequest{
		Info: a.Info,
		DeviceAuth: &models.DeviceAuth{
			Hostname:  a.config.PreferredHostname,
			Identity:  a.Identity,
			TenantID:  a.config.TenantID,
			PublicKey: string(keygen.EncodePublicKeyToPem(a.pubKey)),
		},
	})

	a.authData = data

	return err
}

func (a *Agent) NewReverseListener() (*revdial.Listener, error) {
	return a.cli.NewReverseListener(a.authData.Token)
}

// Listen creates a new SSH server, tunnel to ShellHub and listen for incoming connections.
//
// It's possible to pass a channel to be notified when the agent is listing for connections.
func (a *Agent) Listen(listining chan bool) error {
	a.server = server.NewServer(a.cli, a.authData, a.config.PrivateKey, a.config.KeepAliveInterval, a.config.SingleUserPassword)

	serv := a.server

	tun := tunnel.NewTunnel()
	tun.ConnHandler = func(c echo.Context) error {
		hj, ok := c.Response().Writer.(http.Hijacker)
		if !ok {
			return c.String(http.StatusInternalServerError, "webserver doesn't support hijacking")
		}

		conn, _, err := hj.Hijack()
		if err != nil {
			return c.String(http.StatusInternalServerError, "failed to hijack connection")
		}

		id := c.Param("id")
		httpConn := c.Request().Context().Value("http-conn").(net.Conn)
		serv.Sessions[id] = httpConn
		serv.HandleConn(httpConn)

		conn.Close()

		return nil
	}

	tun.HTTPHandler = func(c echo.Context) error {
		replyError := func(err error, msg string, code int) error {
			log.WithError(err).WithFields(log.Fields{
				"remote":    c.Request().RemoteAddr,
				"namespace": c.Request().Header.Get("X-Namespace"),
				"path":      c.Request().Header.Get("X-Path"),
				"version":   AgentVersion,
			}).Error(msg)

			return c.String(code, msg)
		}

		in, err := net.Dial("tcp", ":80")
		if err != nil {
			return replyError(err, "failed to connect to HTTP server on device", http.StatusInternalServerError)
		}

		defer in.Close()

		url, err := url.Parse(c.Request().Header.Get("X-Path"))
		if err != nil {
			return replyError(err, "failed to parse URL", http.StatusInternalServerError)
		}

		c.Request().URL.Scheme = "http"
		c.Request().URL = url

		if err := c.Request().Write(in); err != nil {
			return replyError(err, "failed to write request to the server on device", http.StatusInternalServerError)
		}

		out, _, err := c.Response().Hijack()
		if err != nil {
			return replyError(err, "failed to hijack connection", http.StatusInternalServerError)
		}

		defer out.Close() // nolint:errcheck

		if _, err := io.Copy(out, in); err != nil {
			return replyError(err, "failed to copy response from device service to client", http.StatusInternalServerError)
		}

		return nil
	}

	tun.CloseHandler = func(c echo.Context) error {
		id := c.Param("id")
		serv.CloseSession(id)

		return nil
	}

	serv.SetDeviceName(a.authData.Name)

	for {
		listener, err := a.NewReverseListener()
		if err != nil {
			time.Sleep(time.Second * 10)

			continue
		}

		namespace := a.authData.Namespace
		tenantName := a.authData.Name
		sshEndpoint := a.serverInfo.Endpoints.SSH

		sshid := strings.NewReplacer(
			"{namespace}", namespace,
			"{tenantName}", tenantName,
			"{sshEndpoint}", strings.Split(sshEndpoint, ":")[0],
		).Replace("{namespace}.{tenantName}@{sshEndpoint}")

		log.WithFields(log.Fields{
			"namespace":      namespace,
			"hostname":       tenantName,
			"server_address": a.config.ServerAddress,
			"ssh_server":     sshEndpoint,
			"sshid":          sshid,
		}).Info("Server connection established")

		throw(listining, true)
		if err := tun.Listen(listener); err != nil {
			continue
		}
		throw(listining, false)
	}
}

// Ping sends an authtorization request to the server every ticker interval.
//
// If the ticker is nil, it will be set to 10 minutes.
// It's possible to pass a channel to be notified when the ping is sent.
func (a *Agent) Ping(ticker *time.Ticker, ping chan Ping) {
	if ticker == nil {
		ticker = time.NewTicker(10 * time.Minute)
	}

	for range ticker.C {
		sessions := make([]string, 0, len(a.server.Sessions))
		for key := range a.server.Sessions {
			sessions = append(sessions, key)
		}

		a.sessions = sessions

		if err := a.authorize(); err != nil {
			a.server.SetDeviceName(a.authData.Name)
		}

		throw(ping, Ping{Timestamp: time.Now()})
	}
}

// CheckUpdate check for agent updates.
func (a *Agent) CheckUpdate() (*semver.Version, error) {
	info, err := a.cli.GetInfo(AgentVersion)
	if err != nil {
		return nil, err
	}

	return semver.NewVersion(info.Version)
}

func (a *Agent) GetInfo() (*models.Info, error) {
	if a.serverInfo != nil {
		return a.serverInfo, nil
	}

	info, err := a.cli.GetInfo(AgentVersion)
	if err != nil {
		return nil, err
	}

	a.serverInfo = info

	return info, nil
}
