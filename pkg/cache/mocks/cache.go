// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, key
func (_m *Cache) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, key, value
func (_m *Cache) Get(ctx context.Context, key string, value interface{}) error {
	ret := _m.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HasAccountLockout provides a mock function with given fields: ctx, source, userID
func (_m *Cache) HasAccountLockout(ctx context.Context, source string, userID string) (int64, int, error) {
	ret := _m.Called(ctx, source, userID)

	if len(ret) == 0 {
		panic("no return value specified for HasAccountLockout")
	}

	var r0 int64
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (int64, int, error)); ok {
		return rf(ctx, source, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(ctx, source, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) int); ok {
		r1 = rf(ctx, source, userID)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, source, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResetLoginAttempts provides a mock function with given fields: ctx, source, userID
func (_m *Cache) ResetLoginAttempts(ctx context.Context, source string, userID string) error {
	ret := _m.Called(ctx, source, userID)

	if len(ret) == 0 {
		panic("no return value specified for ResetLoginAttempts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, source, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: ctx, key, value, ttl
func (_m *Cache) Set(ctx context.Context, key string, value interface{}, ttl time.Duration) error {
	ret := _m.Called(ctx, key, value, ttl)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) error); ok {
		r0 = rf(ctx, key, value, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreLoginAttempt provides a mock function with given fields: ctx, source, userID
func (_m *Cache) StoreLoginAttempt(ctx context.Context, source string, userID string) (int64, int, error) {
	ret := _m.Called(ctx, source, userID)

	if len(ret) == 0 {
		panic("no return value specified for StoreLoginAttempt")
	}

	var r0 int64
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (int64, int, error)); ok {
		return rf(ctx, source, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(ctx, source, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) int); ok {
		r1 = rf(ctx, source, userID)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, source, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
