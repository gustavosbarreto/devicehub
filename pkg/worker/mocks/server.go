// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	worker "github.com/shellhub-io/shellhub/pkg/worker"
	mock "github.com/stretchr/testify/mock"
)

// Server is an autogenerated mock type for the Server type
type Server struct {
	mock.Mock
}

// HandleCron provides a mock function with given fields: spec, cronFunc
func (_m *Server) HandleCron(spec worker.CronSpec, cronFunc worker.CronHandler) {
	_m.Called(spec, cronFunc)
}

// HandleTask provides a mock function with given fields: pattern, cb, opts
func (_m *Server) HandleTask(pattern worker.TaskPattern, cb worker.TaskHandler, opts ...worker.TaskOption) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pattern, cb)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Shutdown provides a mock function with given fields:
func (_m *Server) Shutdown() {
	_m.Called()
}

// Start provides a mock function with given fields:
func (_m *Server) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServer creates a new instance of Server. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Server {
	mock := &Server{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
